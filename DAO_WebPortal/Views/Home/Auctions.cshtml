@{
    Layout = "~/Views/Shared/_MainLayout.cshtml";

}
@model List<Helpers.Models.WebsiteViewModels.AuctionViewModel>
<!-- Tab list -->
<ul class="nav nav-underline border-0" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" data-coreui-toggle="tab" href="#preview-924" role="tab" aria-selected="false">
            <svg class="icon me-2">
                <use xlink:href="/Home/images/svg/free.svg#cil-media-play"></use>
            </svg>Active
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" data-coreui-toggle="tab" href="#code-924" role="tab" aria-selected="true">
            <svg class="icon me-2">
                <use xlink:href="/Home/images/svg/free.svg#cil-check"></use>
            </svg>Completed
        </a>
    </li>
</ul>

<!-- Content -->
<div class="tab-content rounded-bottom mt-2">
    <!-- Tab panel -->
    <div class="tab-pane p-3 active" role="tabpanel" id="preview-924">
        <!-- .card -->
        <div class="card m-2">
            <div class="card-header">
                <span class="small ms-1">Active Internal Auctions</span>
            </div>
            <div class="card-body">
                @if (Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.InternalBidding).Count() > 0)
                {
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Job Name</th>
                                <th scope="col">Auction Start Date</th>
                                <th scope="col">Auction End Date</th>
                                <th scope="col">Time Left</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int Count = 0;}
                            @foreach (var item in Model)
                            {
                                @if (item.Status == Helpers.Constants.Enums.AuctionStatusTypes.InternalBidding)
                                {
                                    Count++;
                                    int TitleLenght = 0;
                                    if (item.Title != null) { TitleLenght = item.Title.Length; if (TitleLenght > 35) { TitleLenght = 35; } } else { item.Title = ""; }
                                    <tr @*class=" auctionDetail" data-href="./Auction-Detail/@item.AuctionID"*@>
                                        <th scope="row">@Count</th>
                                        <td>@item.Title.Substring(0, TitleLenght)</td>
                                        <td>@item.InternalAuctionEndDate.ToString("dd.MM.yyyy")</td>
                                        <td>@item.PublicAuctionEndDate.ToString("dd.MM.yyyy")</td>
                                        <td id="demo_@item.AuctionID"></td>
                                        <td class="cursorp auctionDetail" data-href="./Auction-Detail/@item.AuctionID">
                                            <svg class="icon">
                                                <use xlink:href="/Home/images/svg/free.svg#cil-share"></use>
                                            </svg> Detail
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <partial name="~/Views/Shared/_ErrorPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Auction not found." } }' />
                }

            </div>
        </div> <!-- .card -->
        <!-- .card -->
        <div class="card m-2">
            <div class="card-header"><span class="small ms-1">Active Public Auctions</span></div>
            <div class="card-body">
                @if (Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.PublicBidding).Count() > 0)
                {
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Job Name</th>
                                <th scope="col">Auction Start Date</th>
                                <th scope="col">Auction End Date</th>
                                <th scope="col">Time Left</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int Count2 = 0;}
                            @foreach (var item in Model)
                            {
                                if (item.Status == Helpers.Constants.Enums.AuctionStatusTypes.PublicBidding)
                                {
                                    Count2++;
                                    int TitleLenght = 0;
                                    if (item.Title != null) { TitleLenght = item.Title.Length; if (TitleLenght > 35) { TitleLenght = 35; } } else { item.Title = ""; }
                                    <tr @*class="cursorp auctionDetail" data-href="./Auction-Detail/@item.AuctionID"*@>
                                        <th scope="row">@Count2</th>
                                        <td>@item.Title.Substring(0, TitleLenght)</td>
                                        <td>@item.InternalAuctionEndDate.ToString("dd.MM.yyyy")</td>
                                        <td>@item.PublicAuctionEndDate.ToString("dd.MM.yyyy")</td>
                                        <td id="demo_@item.AuctionID"></td>
                                        <td class="cursorp auctionDetail" data-href="./Auction-Detail/@item.AuctionID">
                                            <svg class="icon">
                                                <use xlink:href="/Home/images/svg/free.svg#cil-share"></use>
                                            </svg> Detail
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <partial name="~/Views/Shared/_ErrorPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Auction not found." } }' />
                }

            </div>
        </div> <!-- .card -->
    </div>
    <!-- Tab panel -->
    <div class="tab-pane p-3" role="tabpanel" id="code-924">
        <!-- .card -->
        <div class="card m-2">
            <div class="card-header">
                <span class="small ms-1">Completed Auctions</span>
            </div>
            <div class="card-body">
                @if (Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.Completed).Count() > 0)
                {
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Job Name</th>
                                <th scope="col">Auction Start Date</th>
                                <th scope="col">Auction End Date</th>
                                <th scope="col">Time Left</th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int Count3 = 0;}
                            @foreach (var item in Model)
                            {
                                if (item.Status == Helpers.Constants.Enums.AuctionStatusTypes.Completed)
                                {
                                    Count3++;
                                    int TitleLenght = 0;
                                    if (item.Title != null) { TitleLenght = item.Title.Length; if (TitleLenght > 35) { TitleLenght = 35; } } else { item.Title = ""; }
                                    <tr @*class="cursorp auctionDetail" data-href="./Auction-Detail/@item.AuctionID"*@>
                                        <th scope="row">@Count3</th>
                                        <td>@item.Title.Substring(0, TitleLenght)</td>
                                        <td>@item.InternalAuctionEndDate.ToString("dd.MM.yyyy")</td>
                                        <td>@item.PublicAuctionEndDate.ToString("dd.MM.yyyy")</td>
                                        <td id="demo_@item.AuctionID">Completed</td>
                                        <td class="cursorp auctionDetail" data-href="./Auction-Detail/@item.AuctionID">
                                            <svg class="icon">
                                                <use xlink:href="/Home/images/svg/free.svg#cil-share"></use>
                                            </svg> Detail
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <partial name="~/Views/Shared/_ErrorPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Auction not found." } }' />
                }

            </div>
        </div><!-- .card -->
        <!-- .card -->
        <div class="card m-2">
            <div class="card-header"><span class="small ms-1">Expired Auctions</span></div>
            <div class="card-body">
                @if (Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.Expired).Count() > 0)
                {
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Job Name</th>
                                <th scope="col">Auction Start Date</th>
                                <th scope="col">Auction End Date</th>
                                <th scope="col">Time Left</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int Count4 = 0;}
                            @foreach (var item in Model)
                            {
                                if (item.Status == Helpers.Constants.Enums.AuctionStatusTypes.Expired)
                                {
                                    Count4++;
                                    int TitleLenght = 0;
                                    if (item.Title != null) { TitleLenght = item.Title.Length; if (TitleLenght > 35) { TitleLenght = 35; } } else { item.Title = ""; }
                                    <tr @*class="cursorp auctionDetail" data-href="./Auction-Detail/@item.AuctionID"*@>
                                        <th scope="row">@Count4</th>
                                        <td>@item.Title.Substring(0, TitleLenght)</td>
                                        <td>@item.InternalAuctionEndDate.ToString("dd.MM.yyyy")</td>
                                        <td>@item.PublicAuctionEndDate.ToString("dd.MM.yyyy")</td>
                                        <td id="demo_@item.AuctionID">Expired</td>
                                        <td class="cursorp auctionDetail" data-href="./Auction-Detail/@item.AuctionID">
                                            <svg class="icon">
                                                <use xlink:href="/Home/images/svg/free.svg#cil-share"></use>
                                            </svg> Detail
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <partial name="~/Views/Shared/_ErrorPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Auction not found." } }' />
                }
            </div>
        </div><!-- .card -->
    </div>
</div>


@section Scripts{

    <script>
        dataModel = @Html.Raw(Json.Serialize(Model.Where(x=>x.Status == Helpers.Constants.Enums.AuctionStatusTypes.InternalBidding || x.Status == Helpers.Constants.Enums.AuctionStatusTypes.PublicBidding).ToList()));
        
        var auctionCountdownDictionary = {};

        $(document).ready(function () {

            $(".auctionDetail").click(function () {
                window.location = $(this).data("href");
            });

            //Start auction countdowns
            for (i = 0; i < dataModel.length; i++) {
                if (dataModel[i].status == 1) {
                    var countDownDate = new Date(dataModel[i].internalAuctionEndDate).getTime();
                } else {
                    var countDownDate = new Date(dataModel[i].publicAuctionEndDate).getTime();
                }
                auctionCountdownDictionary[dataModel[i].auctionID] = countDownDate;
                CountDown(dataModel[i].auctionID, countDownDate);
                StartInterval(dataModel[i], 1000)
            }

        });

        //Send auctionIDs to CountDown function
        function StartInterval(index, frequency) {
            setInterval(function () {
                CountDown(index.auctionID, auctionCountdownDictionary[index.auctionID]);
            }, frequency);
        }

        //Countdown method
        function CountDown(id, countDownDate) {

            var now = new Date().getTime();
            countDownDate = auctionCountdownDictionary[id];
            // Find the distance between now and the count down date
            var distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Output the result in an element with id="demo_id"
            document.getElementById("demo_"+id).innerHTML = "<span>" + days + "</span>" + " days <span>" + hours + "</span> hours <span> "
                + minutes + "</span> min <span>" + seconds + "</span> sec ";

            // If the count down is over, write some text
            if (distance < 0) {
                clearInterval(x);
                document.getElementById("demo_" + id).innerHTML = "EXPIRED";
            }
        }

    </script>
}