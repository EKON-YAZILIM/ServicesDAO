@using DAO_WebPortal.Resources
@model Helpers.Models.WebsiteViewModels.VoteDetailViewModel

@{
    Layout = "../Shared/_MainLayout.cshtml";

}

<div class="row">
    <div class="col-md-12">
        <!--Votes-->
        <div class="card">
            <div class="card-header">
                <!-- .header -->
                <span class="small ms-1"><b>Voting Results</b></span>
                <a href="../Job-Detail/@Model.Voting.JobID" class="float-right">Go to job details</a>
            </div><!-- .header -->
            <div class="card-body p-0">
                <div class="table-responsive">
                    @if (Model.VoteItems.Count > 0)
                    {
                        <table class="table table-striped table-hover mb-0">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Username</th>
                                    <th scope="col">Stake For</th>
                                    <th scope="col">Stake Against</th>
                                    <th scope="col">Vote Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{int Count = 0;}

                                @foreach (var item in Model.VoteItems.OrderBy(x => x.Date))
                                {
                                    Count++;

                                    <tr>
                                        <th scope="row">@Count</th>
                                        <td>@item.UserName</td>
                                        @if (item.Direction == Helpers.Constants.Enums.StakeType.For)
                                        {
                                            <td>@item.ReputationStake</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                        @if (item.Direction == Helpers.Constants.Enums.StakeType.Against)
                                        {
                                            <td>@item.ReputationStake</td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }

                                        <td>@item.Date</td>
                                    </tr>
                                }

                                <tr>
                                    <td>#</td>
                                    <td><b>Staked Total</b></td>
                                    <td><b>@Model.VoteItems.Where(x => x.Direction == Helpers.Constants.Enums.StakeType.For).Sum(x => x.ReputationStake)</b></td>
                                    <td><b>@Model.VoteItems.Where(x => x.Direction == Helpers.Constants.Enums.StakeType.Against).Sum(x => x.ReputationStake)</b></td>
                                    <td></td>
                                </tr>
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "There are no votes in this voting" }, { "Icon", "frown-open" } }' />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Set the date we're counting down to
    var countDownDate = new Date("Jan 5, 2022 15:37:25").getTime();
    $(function () {
        CountDown();
        setInterval(function () {
            CountDown();
        }, 1000);
    });

    function CountDown() {
        var now = new Date().getTime();

        // Find the distance between now and the count down date
        var distance = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Output the result in an element with id="demo"
        document.getElementById("demo").innerHTML = "<span style='font-size:2rem'>" + days + "</span>" + "days <span style='font-size:2rem'>" + hours + "</span>hours<span style='font-size:2rem'> "
            + minutes + "</span>min <span style='font-size:2rem'>" + seconds + "</span>sec ";

        // If the count down is over, write some text
        if (distance < 0) {
            clearInterval(x);
            document.getElementById("demo").innerHTML = "EXPIRED";
        }

    }

</script>
