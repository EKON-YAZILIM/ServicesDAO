@using DAO_WebPortal.Resources
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@model List<Helpers.Models.WebsiteViewModels.VotingViewModel>

@{
    Layout = "../Shared/_MainLayout.cshtml";
}

<!--Tab list-->
<ul class="nav nav-underline border-0 mb-3" role="tablist">
    <li class="nav-item mx-2">
        <a class="nav-link active" data-coreui-toggle="tab" href="#activeVotings" role="tab" aria-selected="false">
            <svg class="icon me-2">
                <use xlink:href="/Home/images/svg/free.svg#cil-media-play"></use>
            </svg>Active
        </a>
    </li>
    <li class="nav-item mx-2">
        <a class="nav-link" data-coreui-toggle="tab" href="#completedVotings" role="tab" aria-selected="true">
            <svg class="icon me-2">
                <use xlink:href="/Home/images/svg/free.svg#cil-check"></use>
            </svg>Completed
        </a>
    </li>
</ul>

<!-- Content -->
<div class="tab-content rounded-bottom mt-2">
    <!--Tab Panel-->
    <div class="tab-pane active" role="tabpanel" id="activeVotings">
        <!--card-->
        <div class="card mb-4">
            <div class="card-header">
                <span class="small ms-1"><b>Active Informal Votes</b></span>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive h-250">
                    @if (Model.Where(x => x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active && x.IsFormal == false).Count() > 0)
                    {
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Title</th>
                                    <th scope="col">Start Date</th>
                                    <th scope="col">End Date</th>
                                    <th scope="col">Time Left</th>
                                    <th scope="col">Quorum</th>
                                    <th scope="col">My Vote</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var informalVotings = Model.Where(x => x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active && x.IsFormal == false).ToList();

                                    @foreach (var item in informalVotings)
                                    {
                                        <tr>
                                            <td>@item.VotingID</td>
                                            <td><a href="../Job-Detail/@item.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(item.Title, 25)</a></td>
                                            <td>@item.StartDate.ToString("dd.MM.yyyy")</td>
                                            <td>@item.EndDate.ToString("dd.MM.yyyy")</td>
                                            <td><b id="counter_@item.VotingID"></b></td>
                                            <td>@item.VoteCount / @item.QuorumCount</td>
                                            @if (item.UserVote == Helpers.Constants.Enums.StakeType.For)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else if (item.UserVote == Helpers.Constants.Enums.StakeType.Against)
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }
                                            else
                                            {
                                                <td>
                                                    <a class="btn btn-sm btn-primary btn-shine me-2" onclick="OpenVoteModal(@item.VotingID)">
                                                        <svg class="icon">
                                                            <use xlink:href="/Home/images/svg/free.svg#cil-send"></use>
                                                        </svg> Submit Vote
                                                    </a>
                                                </td>
                                            }

                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                    }
                    else
                    {
                        <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Voting not found." } }' />
                    }
                </div>
            </div>
        </div><!--card-->
        <!--card-->
        <div class="card">
            <div class="card-header"><span class="small ms-1"><b>Active Formal Votes</b></span></div>
            <div class="card-body p-0">
                <div class="table-responsive h-250">
                    @if (Model.Where(x => x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active && x.IsFormal == true).Count() > 0)
                    {
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Title</th>
                                    <th scope="col">Start Date</th>
                                    <th scope="col">End Date</th>
                                    <th scope="col">Time Left</th>
                                    <th scope="col">Quorum</th>
                                    <th scope="col">My Vote</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var formalVotings = Model.Where(x => x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active && x.IsFormal == true).ToList();

                                    @foreach (var item in formalVotings)
                                    {
                                        <tr>
                                            <td>@item.VotingID</td>
                                            <td><a href="../Job-Detail/@item.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(item.Title, 25)</a></td>
                                            <td>@item.StartDate.ToString("dd.MM.yyyy")</td>
                                            <td>@item.EndDate.ToString("dd.MM.yyyy")</td>
                                            <td><b id="counter_@item.VotingID"></b></td>
                                            <td>@item.VoteCount / @item.QuorumCount</td>
                                            @if (item.UserVote == Helpers.Constants.Enums.StakeType.For)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else if (item.UserVote == Helpers.Constants.Enums.StakeType.Against)
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }
                                            else
                                            {
                                                <td>
                                                    <a class="btn btn-sm btn-primary btn-shine me-2" onclick="OpenVoteModal(@item.VotingID)">
                                                        <svg class="icon">
                                                            <use xlink:href="/Home/images/svg/free.svg#cil-send"></use>
                                                        </svg> Submit Vote
                                                    </a>
                                                </td>
                                            }
                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                    }
                    else
                    {
                        <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Voting not found." } }' />
                    }
                </div>
            </div>
        </div><!--card-->
    </div>
    <!--Tab Panel-->
    <div class="tab-pane" role="tabpanel" id="completedVotings">
        <!--card-->
        <div class="card mb-4">
            <div class="card-header">
                <span class="small ms-1"><b>Completed Informal Votes</b></span>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive h-250">
                    @if (Model.Where(x => (x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed || x.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired) && x.IsFormal == false).Count() > 0)
                    {
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Title</th>
                                    <th scope="col">Start Date</th>
                                    <th scope="col">End Date</th>
                                    <th scope="col">My Vote</th>
                                    <th scope="col">Voting Result</th>
                                    <th scope="col"></th>

                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var informalVotings = Model.Where(x => (x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed || x.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired) && x.IsFormal == false).ToList();

                                    @foreach (var item in informalVotings)
                                    {
                                        <tr>
                                            <td>@item.VotingID</td>
                                            <td><a href="../Job-Detail/@item.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(item.Title, 25)</a></td>
                                            <td>@item.StartDate.ToString("dd.MM.yyyy")</td>
                                            <td>@item.EndDate.ToString("dd.MM.yyyy")</td>

                                            @*User's Vote*@
                                            @if (item.UserVote == Helpers.Constants.Enums.StakeType.For)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else if (item.UserVote == Helpers.Constants.Enums.StakeType.Against)
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }
                                            else
                                            {
                                                <td><button class="btn btn-sm btn-secondary disabled text-white w-100"><b>NONE</b></button></td>
                                            }

                                            @*Voting Result*@
                                            @if (item.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired)
                                            {
                                                <td><button class="btn btn-sm btn-warning disabled text-white w-100"><b>EXPIRED</b></button></td>
                                            }
                                            else if (item.StakedFor > item.StakedAgainst)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }

                                            <td>
                                                <a class="btn btn-sm btn-primary me-2" href="../Vote-Detail/@item.VotingID">
                                                    <svg class="icon">
                                                        <use xlink:href="/Home/images/svg/free.svg#cil-bar-chart"></use>
                                                    </svg> Show Votes
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Voting not found." } }' />
                    }
                </div>
            </div>
        </div>  <!--card-->
        <!--card-->
        <div class="card">
            <div class="card-header"><span class="small ms-1"><b>Completed Formal Votes</b></span></div>
            <div class="card-body p-0">
                <div class="table-responsive h-250">
                    @if (Model.Where(x => (x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed || x.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired) && x.IsFormal == true).Count() > 0)
                    {
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Title</th>
                                    <th scope="col">Start Date</th>
                                    <th scope="col">End Date</th>
                                    <th scope="col">My Vote</th>
                                    <th scope="col">Voting Result</th>
                                    <th scope="col"></th>

                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var formalVotings = Model.Where(x => (x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed || x.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired) && x.IsFormal == true).ToList();

                                    @foreach (var item in formalVotings)
                                    {
                                        <tr>
                                            <td>@item.VotingID</td>
                                            <td><a href="../Job-Detail/@item.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(item.Title, 25)</a></td>
                                            <td>@item.StartDate.ToString("dd.MM.yyyy")</td>
                                            <td>@item.EndDate.ToString("dd.MM.yyyy")</td>
                                            <td><b id="counter_@item.VotingID"></b></td>

                                            @*User's Vote*@
                                            @if (item.UserVote == Helpers.Constants.Enums.StakeType.For)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else if (item.UserVote == Helpers.Constants.Enums.StakeType.Against)
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }
                                            else
                                            {
                                                <td><button class="btn btn-sm btn-secondary disabled text-white w-100"><b>NONE</b></button></td>
                                            }

                                            @*Voting Result*@
                                            @if (item.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired)
                                            {
                                                <td><button class="btn btn-sm btn-warning disabled text-white w-100"><b>EXPIRED</b></button></td>
                                            }
                                            else if (item.StakedFor > item.StakedAgainst)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }

                                            <td>
                                                <a class="btn btn-sm btn-primary me-2" href="../Vote-Detail/@item.VotingID">
                                                    <svg class="icon">
                                                        <use xlink:href="/Home/images/svg/free.svg#cil-bar-chart"></use>
                                                    </svg> Show Votes
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Voting not found." } }' />

                    }
                </div>
            </div>
        </div>  <!--card-->
    </div>
</div>

<!-- Submit Vote Modal  -->
<div class="modal fade" id="VoteModal" tabindex="-1" aria-labelledby="VoteModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Submit Vote For Voting #<span id="votingIdSpan"></span></h5>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <input class="btn-check mr-3" id="btn-check-outlined" type="checkbox" autocomplete="off" onclick="SelectVoteDirection(0)">
                        <label class="btn btn-outline-success w-100 mb-3" for="btn-check-outlined">FOR</label>
                    </div>
                    <div class="col-md-6">
                        <input class="btn-check" id="btn-check-outlined2" type="checkbox" autocomplete="off" onclick="SelectVoteDirection(1)">
                        <label class="btn btn-outline-danger w-100 mb-3" for="btn-check-outlined2">AGAINST</label>
                    </div>
                </div>
                <p>How much reputation do you want to stake for this vote ?</p>
                <div class="input-group mb-3">
                    <input class="form-control" type="text" placeholder="Reputation stake" id="reputationStake"><span class="input-group-text" id="basic-addon2"> Reputation Points</span>
                </div>
            </div>
            <div id="winnerButtons" class="modal-footer">
                <button class="btn btn-secondary" type="button" data-coreui-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" onclick="SubmitVote();">Submit Vote</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{

    <script>
        dataModel = @Html.Raw(Json.Serialize(Model.Where(x=>x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active).ToList()));

        var votingCountdownDictionary = {};
        var selectedVotingId = 0;
        var selectedDirection = 0;

        $(document).ready(function () {

            //Start voting countdowns
            for (i = 0; i < dataModel.length; i++) {
                var countDownDate = new Date(dataModel[i].endDate).getTime();
                votingCountdownDictionary[dataModel[i].votingID] = countDownDate;
                CountDown(dataModel[i].votingID, countDownDate);
                StartInterval(dataModel[i], 1000)
            }

        });

        //Send votingIDs to CountDown function
        function StartInterval(index, frequency) {
            setInterval(function () {
                CountDown(index.votingID, votingCountdownDictionary[index.votingID]);
            }, frequency);
        }

        //Countdown method
        function CountDown(id, countDownDate) {

            var now = new Date().getTime();
            countDownDate = votingCountdownDictionary[id];
            // Find the distance between now and the count down date
            var distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Output the result in an element with id="counter_id"
            document.getElementById("counter_" + id).innerHTML = "<span>" + days.toString() + "</span>" + "D <span>" + hours.toString().padStart(2, '0') + "</span>:<span>"
                + minutes.toString().padStart(2, '0') + "</span>:<span>" + seconds.toString().padStart(2, '0') + "</span>";

            // If the count down is over, write some text
            if (distance < 0) {
                document.getElementById("counter_" + id).innerHTML = "EXPIRED";
            }
        }

        function OpenVoteModal(votingId) {
            selectedVotingId = votingId;
            $("#votingIdSpan").text(votingId);
            $("#VoteModal").modal("toggle");
        }

        function SelectVoteDirection(direction) {
            selectedDirection = direction;
        }

        function SubmitVote(direction) {
             $.confirm({
                    title: 'Confirmation',
                    content: 'Are you sure you want to submit your vote ?',
                    buttons: {
                        cancel: {
                            text: 'Cancel'
                        },
                        confirm: {
                            text: 'Continue',
                            btnClass: 'btn btn-primary',
                            action: function () {
                                $.ajax({
                                    type: "POST",
                                    url: "../Home/SubmitVote",
                                    data: { "VotingID": selectedVotingId, "Direction": selectedDirection, "ReputationStake": $("#reputationStake").val() },
                                    success: function (result) {
                                       console.log(result);
                                            if (result.success) {
                                                window.location.reload();
                                            }
                                            else {
                                                toastr.warning(result.message);
                                            }
                                        },
                                          failure: function (response) {
                                                toastr.warning("@Lang.ConnectionError");
                                        },
                                        error: function (response) {
                                             toastr.error("@Lang.UnexpectedError");
                                    }
                                });
                            }
                        }
                    }
            });
        }
    </script>
}