@using DAO_WebPortal.Resources
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@model List<Helpers.Models.WebsiteViewModels.VotingViewModel>

@{
    Layout = "../Shared/_MainLayout.cshtml";
}

<!--Tab list-->
<div class="row d-flex mb-3">
    <div class="col-md-6">
        <ul class="nav nav-underline border-0" role="tablist">
            <li class="nav-item mx-2">
                <a class="nav-link active" data-coreui-toggle="tab" href="#activeVotings" role="tab" aria-selected="false">
                    <svg class="icon me-2">
                        <use xlink:href="/Home/images/svg/free.svg#cil-media-play"></use>
                    </svg>Active
                </a>
            </li>
            <li class="nav-item mx-2">
                <a class="nav-link" data-coreui-toggle="tab" href="#completedVotings" role="tab" aria-selected="true">
                    <svg class="icon me-2">
                        <use xlink:href="/Home/images/svg/free.svg#cil-check"></use>
                    </svg>Completed
                </a>
            </li>

        </ul>
    </div>
    <div class="col-md-6">
        @if (httpContextAccessor.HttpContext.Session.GetString("UserType") == Helpers.Constants.Enums.UserIdentityType.Admin.ToString() || httpContextAccessor.HttpContext.Session.GetString("UserType") == Helpers.Constants.Enums.UserIdentityType.VotingAssociate.ToString())
        {
            <a href="../New-Simple-Vote" class="btn btn-primary float-right mx-2"><i class="fas fa-plus me-1"></i> New Simple Vote</a>
        }
    </div>
</div>
<!-- Content -->
<div class="tab-content rounded-bottom mt-2">
    <!--Tab Panel-->
    <div class="tab-pane active" role="tabpanel" id="activeVotings">
        <!--card-->
        <div class="card mb-4">
            <div class="card-header">
                <span class="small ms-1 d-inline-block"><b>Active Informal Votes</b></span>

                <div class="form-check form-switch d-inline-block float-right">
                    <input class="form-check-input" type="checkbox" id="informalEligibleSwitch">
                    <small class="form-check-label" for="informalEligibleSwitch">Show only eligible</small>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive h-250">
                    @if (Model.Where(x => x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active && x.IsFormal == false).Count() > 0)
                    {
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Job Title</th>
                                    <th scope="col">Job Price</th>
                                    <th scope="col">Job Doer</th>
                                    <th scope="col">Time Left</th>
                                    <th scope="col">Quorum</th>
                                    <th scope="col">My Vote</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var informalVotings = Model.Where(x => x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active && x.IsFormal == false).ToList();

                                    @foreach (var item in informalVotings)
                                    {
                                        <tr>
                                            <td>@item.JobID</td>
                                            <td><a href="../Job-Detail/@item.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(item.Title, 25)</a></td>
                                            <td>
                                                @if(!string.IsNullOrWhiteSpace(item.JobDoerUsername))
                                                {
                                                    <span>@item.WinnerBidPrice</span>
                                                } 
                                                else{
                                                    <span>Simple Voting</span>
                                                }
                                            </td>
                                            <td>@item.JobDoerUsername</td>
                                            <td><b id="counter_@item.VotingID"></b></td>
                                            <td>
                                                @if(item.VoteCount >= item.QuorumCount)
                                                {
                                                    <i data-toggle="tooltip" data-placement="top" title="Quorum reached" class="fas fa-check-circle mr-2 text-success"></i>
                                                }
                                                else
                                                {                                                       
                                                    <i data-toggle="tooltip" data-placement="top" title="Quorum not reached" class="fas fa-times-circle mr-2 text-danger"></i>
                                                }
                                                 @item.VoteCount / @item.EligibleUserCount                                                
                                            </td>
                                            @if (item.UserVote == Helpers.Constants.Enums.StakeType.For)
                                            {
                                                <td class="informal-noneligible"><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else if (item.UserVote == Helpers.Constants.Enums.StakeType.Against)
                                            {
                                                <td  class="informal-noneligible"><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }
                                            else
                                            {

                                                if (httpContextAccessor.HttpContext.Session.GetInt32("UserID") != item.JobDoerUserID && httpContextAccessor.HttpContext.Session.GetString("UserType") == Helpers.Constants.Enums.UserIdentityType.VotingAssociate.ToString())
                                                {
                                                    <td>
                                                        <a class="btn btn-sm btn-primary btn-shine me-2" onclick="OpenVoteModal(@item.VotingID, @item.JobID)">
                                                            <svg class="icon">
                                                                <use xlink:href="/Home/images/svg/free.svg#cil-send"></use>
                                                            </svg> Submit Vote
                                                        </a>
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td class="informal-noneligible">
                                                        <a class="btn btn-sm btn-dark me-2" disabled>
                                                            <svg class="icon">
                                                                <use xlink:href="/Home/images/svg/free.svg#cil-minus"></use>
                                                            </svg> Not Eligible
                                                        </a>
                                                    </td>
                                                }

                                            }

                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                    }
                    else
                    {
                        <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Voting not found." } }' />
                    }
                </div>
            </div>
        </div><!--card-->
        <!--card-->
        <div class="card">
            <div class="card-header">
                <span class="small ms-1"><b>Active Formal Votes</b></span>
                <div class="form-check form-switch d-inline-block float-right">
                    <input class="form-check-input" type="checkbox" id="formalEligibleSwitch">
                    <small class="form-check-label" for="formalEligibleSwitch">Show only eligible</small>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive h-250">
                    @if (Model.Where(x => x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active && x.IsFormal == true).Count() > 0)
                    {
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Job Title</th>
                                    <th scope="col">Job Price</th>
                                    <th scope="col">Job Doer</th>
                                    <th scope="col">Time Left</th>
                                    <th scope="col">Quorum</th>
                                    <th scope="col">Informal</th>
                                    <th scope="col">My Vote</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var formalVotings = Model.Where(x => x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active && x.IsFormal == true).ToList();

                                    @foreach (var item in formalVotings)
                                    {
                                        <tr>
                                            <th>@item.JobID</th>
                                            <td><a href="../Job-Detail/@item.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(item.Title, 25)</a></td>
                                            <td>
                                                @if(!string.IsNullOrWhiteSpace(item.JobDoerUsername))
                                                {
                                                    <span>@item.WinnerBidPrice</span>
                                                } 
                                                else{
                                                    <span>Simple Voting</span>
                                                }
                                            </td>
                                            <td>@item.JobDoerUsername</td>
                                            <td><b id="counter_@item.VotingID"></b></td>
                                            <td>
                                                @if(item.VoteCount >= item.QuorumCount)
                                                {
                                                    <i data-toggle="tooltip" data-placement="top" title="Quorum reached" class="fas fa-check-circle mr-2 text-success"></i>
                                                }
                                                else
                                                {                                                       
                                                    <i data-toggle="tooltip" data-placement="top" title="Quorum not reached" class="fas fa-times-circle mr-2 text-danger"></i>
                                                }
                                                @item.VoteCount / @item.EligibleUserCount
                                            </td>
                                            <td> 
                                                @{                                        
                                                    double informalPerc = Math.Round(Convert.ToDouble(item.StakedForInformal) / Convert.ToDouble(item.StakedForInformal + item.StakedAgainstInformal) * 100, 2);
                                                    <div><i class="fas fa-caret-up text-success font-lg"></i> <small>@informalPerc</small></div>
                                                    <div><i class="fas fa-caret-down text-danger font-lg"></i> <small>@Math.Round(100-informalPerc,2)</small></div>
                                                }                              
                                            </td>
                                            @if (item.UserVote == Helpers.Constants.Enums.StakeType.For)
                                            {
                                                <td class="formal-noneligible"><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else if (item.UserVote == Helpers.Constants.Enums.StakeType.Against)
                                            {
                                                <td class="formal-noneligible"><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }
                                            else
                                            {
                                                //Check if user voted in the informal voting
                                                bool informalVoted = Model.Count(x=>x.IsFormal == false && x.JobID == item.JobID && x.UserVote != null) > 0;

                                                if (informalVoted && httpContextAccessor.HttpContext.Session.GetInt32("UserID") != item.JobDoerUserID && httpContextAccessor.HttpContext.Session.GetString("UserType") == Helpers.Constants.Enums.UserIdentityType.VotingAssociate.ToString())
                                                {
                                                    <td>
                                                        <a class="btn btn-sm btn-primary btn-shine me-2" onclick="OpenVoteModal(@item.VotingID, @item.JobID)">
                                                            <svg class="icon">
                                                                <use xlink:href="/Home/images/svg/free.svg#cil-send"></use>
                                                            </svg> Submit Vote
                                                        </a>
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td class="formal-noneligible">
                                                        <a class="btn btn-sm btn-dark me-2" disabled>
                                                            <svg class="icon">
                                                                <use xlink:href="/Home/images/svg/free.svg#cil-minus"></use>
                                                            </svg> Not Eligible
                                                        </a>
                                                    </td>
                                                }

                                            }
                                        </tr>
                                    }
                                }

                            </tbody>
                        </table>
                    }
                    else
                    {
                        <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Voting not found." } }' />
                    }
                </div>
            </div>
        </div><!--card-->
    </div>
    <!--Tab Panel-->
    <div class="tab-pane" role="tabpanel" id="completedVotings">
        <!--card-->
        <div class="card mb-4">
            <div class="card-header">
                <span class="small ms-1"><b>Completed Informal Votes</b></span>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive h-250">
                    @if (Model.Where(x => (x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed || x.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired) && x.IsFormal == false).Count() > 0)
                    {
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Job Title</th>
                                    <th scope="col">Job Price</th>
                                    <th scope="col">Job Doer</th>
                                    <th scope="col">Quorum</th>
                                    <th scope="col">My Vote</th>
                                    <th scope="col">Voting Result</th>
                                    <th scope="col"></th>

                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var informalVotings = Model.Where(x => (x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed || x.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired) && x.IsFormal == false).OrderByDescending(x=>x.EndDate).ToList();

                                    @foreach (var item in informalVotings)
                                    {
                                        <tr>
                                            <th>@item.JobID</th>
                                            <td><a href="../Job-Detail/@item.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(item.Title, 25)</a></td>
                                            <td>@item.WinnerBidPrice</td>
                                            <td>@item.JobDoerUsername</td>
                                            <td>
                                                @if(item.VoteCount >= item.QuorumCount)
                                                {
                                                    <i data-toggle="tooltip" data-placement="top" title="Quorum reached" class="fas fa-check-circle mr-2 text-success"></i>
                                                }
                                                else
                                                {                                                       
                                                    <i data-toggle="tooltip" data-placement="top" title="Quorum not reached" class="fas fa-times-circle mr-2 text-danger"></i>
                                                }
                                                 @item.VoteCount / @item.EligibleUserCount                                                
                                            </td>

                                            @*User's Vote*@
                                            @if (item.UserVote == Helpers.Constants.Enums.StakeType.For)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else if (item.UserVote == Helpers.Constants.Enums.StakeType.Against)
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }
                                            else
                                            {
                                                <td><button class="btn btn-sm btn-secondary disabled text-white w-100"><b>NONE</b></button></td>
                                            }

                                            @*Voting Result*@
                                            @if (item.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired)
                                            {
                                                <td><button class="btn btn-sm btn-warning disabled text-white w-100"><b>EXPIRED</b></button></td>
                                            }
                                            else if (item.StakedFor > item.StakedAgainst)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }

                                            <td>
                                                <a class="btn btn-sm btn-primary me-2 float-right" href="../Vote-Detail/@item.VotingID">
                                                    <svg class="icon">
                                                        <use xlink:href="/Home/images/svg/free.svg#cil-bar-chart"></use>
                                                    </svg> Show Votes
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Voting not found." } }' />
                    }
                </div>
            </div>
        </div>  <!--card-->
        <!--card-->
        <div class="card">
            <div class="card-header"><span class="small ms-1"><b>Completed Formal Votes</b></span></div>
            <div class="card-body p-0">
                <div class="table-responsive h-250">
                    @if (Model.Where(x => (x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed || x.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired) && x.IsFormal == true).Count() > 0)
                    {
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Job Title</th>
                                    <th scope="col">Job Price</th>
                                    <th scope="col">Job Doer</th>
                                    <th scope="col">Quorum</th>
                                    <th scope="col">Informal</th>
                                    <th scope="col">My Vote</th>
                                    <th scope="col">Voting Result</th>
                                    <th scope="col"></th>

                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    var formalVotings = Model.Where(x => (x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed || x.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired) && x.IsFormal == true).OrderByDescending(x=>x.EndDate).ToList();

                                    @foreach (var item in formalVotings)
                                    {
                                        <tr>
                                            <th>@item.JobID</th>
                                            <td><a href="../Job-Detail/@item.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(item.Title, 25)</a></td>
                                            <td>@item.WinnerBidPrice</td>
                                            <td>@item.JobDoerUsername</td>
                                            <td>
                                                @if(item.VoteCount >= item.QuorumCount)
                                                {
                                                    <i data-toggle="tooltip" data-placement="top" title="Quorum reached" class="fas fa-check-circle mr-2 text-success"></i>
                                                }
                                                else
                                                {                                                       
                                                    <i data-toggle="tooltip" data-placement="top" title="Quorum not reached" class="fas fa-times-circle mr-2 text-danger"></i>
                                                }
                                                 @item.VoteCount / @item.EligibleUserCount                                                
                                            </td>
                                            <td>                                         
                                                @{                                        
                                                    double informalPerc = Math.Round(Convert.ToDouble(item.StakedForInformal) / Convert.ToDouble(item.StakedForInformal + item.StakedAgainstInformal) * 100, 2);
                                                    <div><i class="fas fa-caret-up text-success font-lg"></i> <small>@informalPerc</small></div>
                                                    <div><i class="fas fa-caret-down text-danger font-lg"></i> <small>@Math.Round(100-informalPerc,2)</small></div>
                                                }
                                            </td>
                                            @*User's Vote*@
                                            @if (item.UserVote == Helpers.Constants.Enums.StakeType.For)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else if (item.UserVote == Helpers.Constants.Enums.StakeType.Against)
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }
                                            else
                                            {
                                                <td><button class="btn btn-sm btn-secondary disabled text-white w-100"><b>NONE</b></button></td>
                                            }

                                            @*Voting Result*@
                                            @if (item.Status == Helpers.Constants.Enums.VoteStatusTypes.Expired)
                                            {
                                                <td><button class="btn btn-sm btn-warning disabled text-white w-100"><b>EXPIRED</b></button></td>
                                            }
                                            else if (item.StakedFor > item.StakedAgainst)
                                            {
                                                <td><button class="btn btn-sm btn-success disabled text-white w-100"><b>FOR</b></button></td>
                                            }
                                            else
                                            {
                                                <td><button class="btn btn-sm btn-danger disabled text-white w-100"><b>AGAINST</b></button></td>
                                            }

                                            <td>
                                                <a class="btn btn-sm btn-primary me-2 float-right" href="../Vote-Detail/@item.VotingID">
                                                    <svg class="icon">
                                                        <use xlink:href="/Home/images/svg/free.svg#cil-bar-chart"></use>
                                                    </svg> Show Votes
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Voting not found." } }' />

                    }
                </div>
            </div>
        </div>  <!--card-->
    </div>
</div>

<!-- Submit Vote Modal  -->
<div class="modal fade" id="VoteModal" tabindex="-1" aria-labelledby="VoteModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Submit Vote For Job #<span id="jobIdSpan"></span></h5>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <input class="btn-check mr-3" id="btn-check-outlined" type="radio" autocomplete="off" name="btnradio" onclick="SelectVoteDirection(0)">
                        <label class="btn btn-outline-success w-100 mb-3" for="btn-check-outlined">FOR</label>
                    </div>
                    <div class="col-md-6">
                        <input class="btn-check" id="btn-check-outlined2" type="radio" autocomplete="off" name="btnradio" onclick="SelectVoteDirection(1)">
                        <label class="btn btn-outline-danger w-100 mb-3" for="btn-check-outlined2">AGAINST</label>
                    </div>
                </div>
                <p>How much reputation do you want to stake for this vote ?</p>
                <div class="input-group mb-1">
                    <input class="form-control" type="text" placeholder="Reputation stake" id="reputationStake"><span class="input-group-text" id="basic-addon2"> Reputation Points</span>
                </div>
                <small class="mb-3">Available reputation: @httpContextAccessor.HttpContext.Session.GetString("LastUsableReputation")</small>
            </div>
            <div id="winnerButtons" class="modal-footer">
                <button class="btn btn-secondary" type="button" data-coreui-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary" onclick="SubmitVote();" id="voteBtn">Submit Vote</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{

    <script>
        dataModel = @Html.Raw(Json.Serialize(Model.Where(x=>x.Status == Helpers.Constants.Enums.VoteStatusTypes.Active).ToList()));

        var votingCountdownDictionary = {};

        var selectedVotingId = 0;
        var selectedDirection = -1;

        var now = new Date(@DateTime.Now.Year, @(DateTime.Now.Month-1), @DateTime.Now.Day, @DateTime.Now.Hour, @DateTime.Now.Minute, @DateTime.Now.Second);

        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip()

            setInterval(function () {
                now.setSeconds(now.getSeconds() + 1);
            }, 1000);

            //Start voting countdowns
            for (i = 0; i < dataModel.length; i++) {
                var countDownDate = new Date(dataModel[i].endDate).getTime();
                votingCountdownDictionary[dataModel[i].votingID] = countDownDate;
                CountDown(dataModel[i].votingID, countDownDate);
                StartInterval(dataModel[i], 1000)
            }

            //Show only eligible switch events
            $("#informalEligibleSwitch").change(function () {
                if (this.checked) {
                    $('.informal-noneligible').each(function (i, obj) {
                        $(obj).parent().addClass("d-none");
                    });
                }
                else {
                    $('.informal-noneligible').each(function (i, obj) {
                        $(obj).parent().removeClass("d-none");
                    });
                }
            });

            //Show only eligible switch events
            $("#formalEligibleSwitch").change(function () {
                if (this.checked) {
                    $('.formal-noneligible').each(function (i, obj) {
                        $(obj).parent().addClass("d-none");
                    });
                }
                else {
                    $('.formal-noneligible').each(function (i, obj) {
                        $(obj).parent().removeClass("d-none");
                    });
                }
            });
        });

        //Send votingIDs to CountDown function
        function StartInterval(index, frequency) {
            setInterval(function () {
                CountDown(index.votingID, votingCountdownDictionary[index.votingID]);
            }, frequency);
        }

        //Countdown method
        function CountDown(id, countDownDate) {

            countDownDate = votingCountdownDictionary[id];

            // Find the distance between now and the count down date
            var distance = countDownDate - now.getTime();

            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Output the result in an element with id="counter_id"
            document.getElementById("counter_" + id).innerHTML = "<span>" + days.toString() + "</span>" + "D <span>" + hours.toString().padStart(2, '0') + "</span>:<span>"
                + minutes.toString().padStart(2, '0') + "</span>:<span>" + seconds.toString().padStart(2, '0') + "</span>";

            // If the count down is over, write some text
            if (distance < 0) {
                document.getElementById("counter_" + id).innerHTML = "EXPIRED";
            }
        }

        function OpenVoteModal(votingId, jobId) {
            selectedDirection = -1;
            selectedVotingId = votingId;
            $("#jobIdSpan").text(jobId);
            $("#VoteModal").modal("toggle");
        }

        function SelectVoteDirection(direction) {
            selectedDirection = direction;
        }

        function SubmitVote(direction) {
            if (selectedDirection == -1) {
                toastr.warning("Please select a side for your vote.");
                return;
            }

             $.confirm({
                    title: 'Confirmation',
                    content: 'Are you sure you want to submit your vote ?',
                    buttons: {
                        cancel: {
                            text: 'Cancel'
                        },
                        confirm: {
                            text: 'Continue',
                            btnClass: 'btn btn-primary',
                            action: function () {
                                $("#voteBtn").prop("disabled", true);
                                $("#voteBtn").html('<i class="fas fa-circle-notch fa-spin"></i> Submitting Vote...');

                                $.ajax({
                                    type: "POST",
                                    url: "../Home/SubmitVote",
                                    data: { "VotingID": selectedVotingId, "Direction": selectedDirection, "ReputationStake": $("#reputationStake").val() },
                                    success: function (result) {
                                            if (result.success) {
                                                window.location.reload();
                                            }
                                            else {
                                                toastr.warning(result.message);
                                            }

                                            $("#voteBtn").prop("disabled", false);
                                            $("#voteBtn").html('Submit Vote');
                                        },
                                        failure: function (response) {
                                            toastr.warning("@Lang.ConnectionError");
                                            $("#voteBtn").prop("disabled", false);
                                            $("#voteBtn").html('Submit Vote');                                                
                                        },
                                        error: function (response) {
                                            toastr.error("@Lang.UnexpectedError");
                                            $("#voteBtn").prop("disabled", false);
                                            $("#voteBtn").html('Submit Vote');     
                                        }
                                });
                            }
                        }
                    }
            });
        }
    </script>
}