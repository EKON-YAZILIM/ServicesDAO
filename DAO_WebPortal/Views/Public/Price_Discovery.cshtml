@{
    Layout = "../Shared/_PublicLayout.cshtml";
}
@model List<Helpers.Models.WebsiteViewModels.AuctionViewModel>

<partial name="../Shared/_PublicHeaderPartial" />

<main class="nk-pages">
    <section class="section-contact bg-transparent section pt-5">
        <div class="container">
            <ul class="nav tab-nav tab-nav-line tab-nav-center">
                <li><a class="active" data-toggle="tab" href="#activeAuctionsTab"><i class="fas fa-gavel"></i> Active Auctions</a></li>
                <li><a data-toggle="tab" href="#completedAuctionsTab"><i class="fas fa-trophy"></i> Completed Auctions</a></li>
            </ul>

            <!-- Content -->
            <div class="tab-content rounded-bottom mt-2">
                <!-- Tab panel -->
                <div class="tab-pane active" role="tabpanel" id="activeAuctionsTab">
                    <!-- .card -->
                    <div class="card mb-4 p-0">
                        <div class="card-header">
                            <span class="ms-1"><b>Active Internal Auctions</b></span>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive h-250">
                                @if (Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.InternalBidding).Count() > 0)
                                {
                                    <table class="table table-striped table-hover auctionsTable">
                                        <thead>
                                            <tr>
                                                <th scope="col">#</th>
                                                <th scope="col">Job Name</th>
                                                <th scope="col">Job Budget</th>
                                                <th scope="col">Job Poster</th>
                                                <th scope="col">Timeframe</th>
                                                <th scope="col">Start Date</th>
                                                <th scope="col">Time Left</th>
                                                <th scope="col">Bid Count</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                var internalAuctions = Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.InternalBidding).ToList();

                                                @foreach (var auction in internalAuctions)
                                                {
                                                    <tr>
                                                        <th scope="row">@auction.JobID</th>
                                                        <td><a href="../Public-Job-Detail/@auction.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(auction.Title, 25)</a></td>
                                                        <td>@auction.JobPrice €</td>
                                                        <td>@auction.JobPosterUsername</td>
                                                        <td>@auction.ExpectedTimeframe days</td>
                                                        <td>@auction.CreateDate.ToString("MM/dd/yyyy HH:mm")</td>
                                                        <td><b id="counter_@auction.AuctionID"></b></td>
                                                        <td>@auction.BidCount</td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "No active auctions currently" } }' />
                                }
                            </div>
                        </div>
                    </div> <!-- .card -->
                    <!-- .card -->
                    <div class="card  p-0">
                        <div class="card-header"><span class="ms-1"><b>Active Public Auctions</b></span></div>
                        <div class="card-body p-0">
                            <div class="table-responsive h-250">
                                @if (Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.PublicBidding).Count() > 0)
                                {
                                    <table class="table table-striped table-hover auctionsTable">
                                        <thead>
                                            <tr>
                                                <th scope="col">#</th>
                                                <th scope="col">Job Name</th>
                                                <th scope="col">Job Budget</th>
                                                <th scope="col">Job Poster</th>
                                                <th scope="col">Timeframe</th>
                                                <th scope="col">Start Date</th>
                                                <th scope="col">Time Left</th>
                                                <th scope="col">Bid Count</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                var publicAuctions = Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.PublicBidding).ToList();

                                                @foreach (var auction in publicAuctions)
                                                {
                                                    <tr>
                                                        <th scope="row">@auction.JobID</th>
                                                        <td><a href="../Public-Job-Detail/@auction.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(auction.Title, 25)</a></td>
                                                        <td>@auction.JobPrice €</td>
                                                        <td>@auction.JobPosterUsername</td>
                                                        <td>@auction.ExpectedTimeframe days</td>
                                                        <td>@auction.CreateDate.ToString("MM/dd/yyyy HH:mm")</td>
                                                        <td><b id="counter_@auction.AuctionID"></b></td>
                                                        <td>@auction.BidCount</td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "No active auctions currently" } }' />
                                }
                            </div>
                        </div>
                    </div> <!-- .card -->
                </div>
                <!-- Tab panel -->
                <div class="tab-pane" role="tabpanel" id="completedAuctionsTab">
                    <!-- .card -->
                    <div class="card mb-4 p-0">
                        <div class="card-header">
                            <span class="ms-1"><b>Completed Auctions</b></span>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive h-250">
                                @if (Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.Completed).Count() > 0)
                                {
                                    <table class="table table-striped table-hover auctionsTable">
                                        <thead>
                                            <tr>
                                                <th scope="col">#</th>
                                                <th scope="col">Job Name</th>
                                                <th scope="col">Job Budget</th>
                                                <th scope="col">Job Poster</th>
                                                <th scope="col">Timeframe</th>
                                                <th scope="col">Winner User</th>
                                                <th scope="col">Bid Count</th>
                                                <th scope="col"></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                var completedAuctions = Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.Completed).ToList();

                                                @foreach (var auction in completedAuctions)
                                                {
                                                    <tr>
                                                        <th scope="row">@auction.JobID</th>
                                                        <td><a href="../Public-Job-Detail/@auction.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(auction.Title, 25)</a></td>
                                                        <td>@auction.JobPrice</td>
                                                        <td>@auction.JobPosterUsername</td>
                                                        <td>@auction.ExpectedTimeframe</td>
                                                        <td>@auction.WinnerUserName</td>
                                                        <td>@auction.BidCount</td>
                                                        <td>
                                                            <a class="btn btn-sm btn-primary me-2" href="../Price-Discovery-Detail/@auction.AuctionID">
                                                                <i class="fas fa-list-ul mr-2"></i> Show Bids
                                                            </a>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Auction not found." } }' />
                                }
                            </div>
                        </div>
                    </div><!-- .card -->
                    <!-- .card -->
                    <div class="card p-0">
                        <div class="card-header"><span class="ms-1"><b>Expired Auctions</b></span></div>
                        <div class="card-body p-0">
                            <div class="table-responsive h-250">
                                @if (Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.Expired).Count() > 0)
                                {
                                    <table class="table table-striped table-hover auctionsTable">
                                        <thead>
                                            <tr>
                                                <th scope="col">#</th>
                                                <th scope="col">Job Name</th>
                                                <th scope="col">Job Budget</th>
                                                <th scope="col">Job Poster</th>
                                                <th scope="col">Timeframe</th>
                                                <th scope="col">Winner User</th>
                                                <th scope="col">Bid Count</th>
                                                <th scope="col"></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                var expiredAuctions = Model.Where(x => x.Status == Helpers.Constants.Enums.AuctionStatusTypes.Expired).ToList();

                                                @foreach (var auction in expiredAuctions)
                                                {
                                                    <tr>
                                                        <th scope="row">@auction.JobID</th>
                                                        <td><a href="../Public-Job-Detail/@auction.JobID">@DAO_WebPortal.Utility.StringHelper.ShortenString(auction.Title, 25)</a></td>
                                                        <td>@auction.JobPrice</td>
                                                        <td>@auction.JobPosterUsername</td>
                                                        <td>@auction.ExpectedTimeframe</td>
                                                        <td>-</td>
                                                        <td>@auction.BidCount</td>
                                                        <td>
                                                            <a class="btn btn-sm btn-primary me-2" href="../Price-Discovery-Detail/@auction.AuctionID">
                                                                <i class="fas fa-list-ul mr-2"></i> Show Bids
                                                            </a>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <partial name="../Shared/_EmptyPartial.cshtml" view-data='new ViewDataDictionary(ViewData) { { "Message", "Auction not found." } }' />
                                }
                            </div>
                        </div>
                    </div><!-- .card -->
                </div>
            </div>
        </div>
    </section>
</main>

<partial name="../Shared/_PublicFooterPartial" />


@section Scripts{

    <script>

        //Get auctions json model for time left counter
        dataModel = @Html.Raw(Json.Serialize(Model.Where(x=>x.Status == Helpers.Constants.Enums.AuctionStatusTypes.InternalBidding || x.Status == Helpers.Constants.Enums.AuctionStatusTypes.PublicBidding).ToList()));

        var auctionCountdownDictionary = {};

        var now = new Date(@DateTime.Now.Year, @(DateTime.Now.Month-1), @DateTime.Now.Day, @DateTime.Now.Hour, @DateTime.Now.Minute, @DateTime.Now.Second);

        var selectedAuctionId = 0;

        $(document).ready(function () {

            setInterval(function () {
                now.setSeconds(now.getSeconds() + 1);
            }, 1000);

            //Start auction countdowns
            for (i = 0; i < dataModel.length; i++) {
                if (dataModel[i].status == 1) {
                    var countDownDate = new Date(dataModel[i].internalAuctionEndDate).getTime();
                } else {
                    var countDownDate = new Date(dataModel[i].publicAuctionEndDate).getTime();
                }
                auctionCountdownDictionary[dataModel[i].auctionID] = countDownDate;
                CountDown(dataModel[i].auctionID, countDownDate);
                StartInterval(dataModel[i], 1000)
            }

            //Show only eligible switch events
            $("#internalEligibleSwitch").change(function () {
                if (this.checked) {
                    $(".internal-noneligible").addClass("d-none");
                }
                else {
                    $(".internal-noneligible").removeClass("d-none");
                }
            });

            //Show only eligible switch events
            $("#publicEligibleSwitch").change(function () {
                if (this.checked) {
                    $(".public-noneligible").addClass("d-none");
                }
                else {
                    $(".public-noneligible").removeClass("d-none");
                }
            });
        });

        //Send auctionIDs to CountDown function
        function StartInterval(index, frequency) {
            setInterval(function () {
                CountDown(index.auctionID, auctionCountdownDictionary[index.auctionID]);
            }, frequency);
        }

        //Countdown method
        function CountDown(id, countDownDate) {

            countDownDate = auctionCountdownDictionary[id];
            // Find the distance between now and the count down date
            var distance = countDownDate - now.getTime();

            // Time calculations for days, hours, minutes and seconds
            var days = Math.floor(distance / (1000 * 60 * 60 * 24));
            var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((distance % (1000 * 60)) / 1000);

            // Output the result in an element with id="counter_id"
            document.getElementById("counter_" + id).innerHTML = "<span>" + days.toString() + "</span>" + "D <span>" + hours.toString().padStart(2, '0') + "</span>:<span>"
                + minutes.toString().padStart(2, '0') + "</span>:<span>" + seconds.toString().padStart(2, '0') + "</span>";

            // If the count down is over, write some text
            if (distance < 0) {
                document.getElementById("counter_" + id).innerHTML = "EXPIRED";
            }
        }
        </script>
}