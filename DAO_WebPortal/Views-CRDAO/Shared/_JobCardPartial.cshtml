@model Helpers.Models.WebsiteViewModels.JobPostViewModel

@using DAO_WebPortal.Resources
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor


<div class="card-header">
    <!-- .header -->
    <div class="titleContainer">
        <span class="badge bg-primary">#@Model.JobID</span>

        <h5 class="card-title mx-2" title="@Model.Title">@DAO_WebPortal.Utility.StringHelper.ShortenString(Model.Title, 90)</h5>
        <small class="text-medium-emphasis">@Model.CreateDate.ToShortDateString() , @Model.JobPosterUserName</small>

        @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.AdminApprovalPending || Model.Status == Helpers.Constants.Enums.JobStatusTypes.DoSFeePending || Model.Status == Helpers.Constants.Enums.JobStatusTypes.KYCPending)
        {
            <span class="badge bg-warning float-right mt-1">Pending</span>
        }

        @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.InternalAuction)
        {
            <a href="../Auctions" class="badge bg-success float-right mt-1">Internal Auction</a>
        }

        @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.PublicAuction)
        {
            <a href="../Auctions" class="badge bg-success float-right mt-1">Public Auction</a>
        }

        @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.AuctionCompleted)
        {
            <a href="../Auctions" class="badge bg-primary float-right mt-1">Auction Completed</a>
        }

        @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.InformalVoting)
        {
            <a href="../Votings" class="badge bg-success float-right mt-1">Informal Voting</a>
        }

        @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.FormalVoting)
        {
            <span href="../Votings" class="badge bg-success float-right mt-1">Formal Voting</span>
        }

        @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.Completed)
        {
            <span class="badge bg-success float-right mt-1">Completed</span>
        }

        @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.Failed || Model.Status == Helpers.Constants.Enums.JobStatusTypes.Expired || Model.Status == Helpers.Constants.Enums.JobStatusTypes.Rejected || Model.Status == Helpers.Constants.Enums.JobStatusTypes.FailRestart)
        {
            <span class="badge bg-danger float-right">@Model.Status.ToString()</span>
        }

    </div>
</div><!-- .header -->

<!-- Card Body -->
@{
    string divProps = "class=\"card-body\"";
    string pageType = "detail";
    string jobType = "job";

    if(!httpContextAccessor.HttpContext.Request.Path.ToString().Contains("Job-Detail")){
        divProps = "class=\"card-body cursorp\" onclick=\"GoToJobDetail("+Model.JobID+")\"";
        pageType = "summary";
    }

    if(string.IsNullOrEmpty(Model.TimeFrame) && Model.Amount == 0){
        jobType = "simplevote";
    }
}
<div @Html.Raw(divProps)>

    @* JOB SUMMARY *@
    @if(jobType == "job"){
        <div class="row">
            <div class="col-md-8">
                <h5 class="mb-3 mt-2"><i class="fas fa-archive me-1"></i> Job Summary</h5>

                <table class="table jobDetailTable">
                    <tr>
                        <td><i class="fas fa-coins me-2"></i><i>Job Poster's Budget</i></td>
                        <td>@Model.Amount €</td>
                    </tr>
                    <tr>
                        <td><i class="fas fa-calendar me-2"></i><i>Time Frame</i></td>
                        <td>@Model.TimeFrame days</td>
                    </tr>
                    @if(!string.IsNullOrEmpty(Model.JobDoerUsername)){
                        <tr>
                            <td><i class="fas fa-user me-2"></i><i>Job Doer</i></td>
                            <td>@Model.JobDoerUsername</td>
                        </tr>
                    }
                    <tr>
                        <td><i class="fas fa-hashtag me-2"></i><i>Tags / Coding Lang.</i></td>
                        <td>
                            @if(string.IsNullOrEmpty(@Model.Tags)){
                                <i>No tags specified.</i>
                            }
                            else{
                                foreach(var tag in Model.Tags.Split(',')){
                                    <span class="badge bg-secondary me-1">@tag</span>
                                }
                            }
                        </td>
                    </tr>
                    <tr>
                        <td><i class="fas fa-code me-2"></i><i>Code Link</i></td>
                        <td><a target="_blank" href="@Model.CodeUrl">@DAO_WebPortal.Utility.StringHelper.ShortenString(Model.CodeUrl, 40)</a></td>
                    </tr>
                    @if(pageType == "detail" && Model.Auction != null && Model.Auction.WinnerAuctionBidID != null){
                        try{
                            <tr>
                                <td><i class="fas fa-clock me-2"></i><i>Deadline</i></td>
                                <td>
                                    @Model.Auction.PublicAuctionEndDate.AddDays(Convert.ToInt32(Model.AuctionBids.First(x=>x.AuctionBidID == Model.Auction.WinnerAuctionBidID).Time))
                                </td>
                            </tr>
                        }
                        catch{

                        }
                    }
                </table>
            </div>
            <div class="col-md-4">
                 <h5 class="mb-3 mt-2"><i class="fas fa-gavel me-1"></i> Bids</h5>
                 @if(Model.Auction == null || Model.Auction.AuctionID <= 0){
                    <center class="p-3">
                        <i class="fas fa-hourglass-start text-secondary my-3" style="font-size:35px"></i>
                        <h6 class="text-secondary">Auction did not start for this job yet</h6>
                    </center>
                 }
                 else if (Model.Auction.AuctionID > 0 && Model.AuctionBids.Count == 0){
                    <center class="p-3">
                        <i class="fas fa-user-times text-secondary my-3" style="font-size:35px"></i>
                        <h6 class="text-secondary">There are no bids for this job</h6>
                    </center>
                 }
                 else if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.InternalAuction || Model.Status == Helpers.Constants.Enums.JobStatusTypes.PublicAuction){
                    <div class="table-responsive jobCardBid">
                        <table class="table table-dark">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Price</th>
                                    <th>Total Reps</th>
                                    <th>Stake</th>
                                    <th>Timeframe</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var bid in Model.AuctionBids)
                                {
                                    string colClass = "bg-info text-white";
                                    if(bid.UserType == Helpers.Constants.Enums.UserIdentityType.VotingAssociate.ToString()){
                                        colClass = "bg-primary text-white";
                                    }
                                    <tr>
                                        <td class="@colClass">
                                            @if(bid.UserType == Helpers.Constants.Enums.UserIdentityType.VotingAssociate.ToString()){
                                                <small>VA</small>
                                            }
                                            else{
                                                <small>NonVA</small>
                                            }
                                        </td>
                                        <td class="@colClass">@bid.Price€</td>
                                        <td class="@colClass">@DAO_WebPortal.Utility.StringHelper.AnonymizeReputation(bid.UsersTotalReputation)</td>
                                        <td class="@colClass">@bid.ReputationStake</td>
                                        <td class="@colClass">@bid.Time days</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                 }
                 else {
                    <div class="table-responsive jobCardBid">
                        <table class="table table-dark">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Username</th>
                                    <th>Price</th>
                                    <th>Timeframe</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var bid in Model.AuctionBids)
                                {
                                    string colClass = "";
                                    if(bid.AuctionBidID == Model.Auction.WinnerAuctionBidID){
                                        colClass = "bg-success text-white";
                                    }
                                    <tr>
                                        <td class="@colClass">
                                            @if(bid.UserType == Helpers.Constants.Enums.UserIdentityType.VotingAssociate.ToString()){
                                                <small>VA</small>
                                            }
                                            else{
                                                <small>NonVA</small>
                                            }
                                        </td>
                                        <td class="@colClass">
                                            @bid.UserName
                                        </td>
                                        <td class="@colClass">@bid.Price€</td>
                                        <td class="@colClass">@bid.Time days</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                 }
            </div>
        </div>
    }

    @* JUMP TO COMMMENTS LINK *@
    @if(pageType == "detail" && jobType == "job"){
        <span>@Model.CommentCount comments made for this topic. <small><a href="#comments">Click here to jump comments section</a></small></span>
    }

    @* VOTE SUMMARY *@
    @if(pageType == "detail"){
        bool addSeperator = false;

        if(Model.Voting.Any(x=>x.IsFormal == false && x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed)){
            addSeperator = true;

            var voting = Model.Voting.First(x=>x.IsFormal == false && x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed);
            double forRatio = Convert.ToDouble(voting.StakedFor) / Convert.ToDouble(voting.StakedFor + voting.StakedAgainst);
            string forPerc = Math.Round(forRatio * 100, 2) + "%";
            double againstRatio = 1 - forRatio;
            string againstPerc = Math.Round(againstRatio * 100, 2) + "%";

            if(forPerc.ToLower().Contains("nan")){
                forRatio = 0;
                forPerc = "0%";
            }

            if(againstPerc.ToLower().Contains("nan")){
                againstRatio = 0;
                againstPerc = "0%";
            }

            <hr>
            <div class="pb-3">
                <h5><i class="fas fa-vote-yea py-3 me-1"></i> Informal Vote Results</h5>
                <div class="p-1">
                    <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" style="width:@forPerc"
                            aria-valuenow="@forRatio" aria-valuemin="0" aria-valuemax="100">@forPerc</div>
                        <div class="progress-bar bg-danger" role="progressbar" style="width:@againstPerc"
                            aria-valuenow="@againstRatio" aria-valuemin="0" aria-valuemax="100">@againstPerc</div>
                    </div>
                    <div class="mt-2">
                        <b class="float-left">For @forPerc</b>
                        <b class="float-right">Against @againstPerc</b>
                    </div>
                     <small class="float-right mt-2"><a href="../Vote-Detail/@voting.VotingID"> View vote details</a></small>
                </div>
            </div>

        }

        if(Model.Voting.Any(x=>x.IsFormal == true && x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed)){
            addSeperator = true;

            var voting = Model.Voting.First(x=>x.IsFormal == true && x.Status == Helpers.Constants.Enums.VoteStatusTypes.Completed);
            double forRatio = Convert.ToDouble(voting.StakedFor) / Convert.ToDouble(voting.StakedFor + voting.StakedAgainst);
            string forPerc = Math.Round(forRatio * 100, 2) + "%";
            double againstRatio = 1 - forRatio;
            string againstPerc = Math.Round(againstRatio * 100, 2) + "%";

            if(forPerc.ToLower().Contains("nan")){
                forRatio = 0;
                forPerc = "0%";
            }

            if(againstPerc.ToLower().Contains("nan")){
                againstRatio = 0;
                againstPerc = "0%";
            }
            
            <div class="py-3">
                <h5><i class="fas fa-vote-yea pb-3 me-1"></i> Formal Vote Results</h5>
                <div class="p-1">
                    <div class="progress">
                        <div class="progress-bar bg-success" role="progressbar" style="width:@forPerc"
                            aria-valuenow="@forRatio" aria-valuemin="0" aria-valuemax="100">@forPerc</div>
                        <div class="progress-bar bg-danger" role="progressbar" style="width:@againstPerc"
                            aria-valuenow="@againstRatio" aria-valuemin="0" aria-valuemax="100">@againstPerc</div>
                    </div>
                    <div class="mt-2">
                        <b class="float-left">For @forPerc</b>
                        <b class="float-right">Against @againstPerc</b>
                    </div>
                     <small class="float-right mt-2"><a href="../Vote-Detail/@voting.VotingID"> View vote details</a></small>
                </div>
            </div>
        }

        if(addSeperator){
            <hr> 
        }
    }

    @* FULL DESCRIPTION *@
    @if(pageType == "detail" || jobType == "simplevote"){

        @if(jobType == "job"){
            <h5><i class="fas fa-folder-open me-1 mt-3"></i> Job Description</h5>
        }
        else if(jobType == "simplevote"){
            <h5><i class="fas fa-poll me-1"></i> Simple Vote</h5>
        }

        @* If job description is html text dont use pre-line styling *@
        if (Model.JobDescription.Contains(">") && Model.JobDescription.Contains("<"))
        {
            <div class="p-3 py-3 card-text">
                @Html.Raw(Model.JobDescription)
            </div>
        }
        @* If job description is raw text use pre-line styling *@
        else
        { 
            <div class="p-3 pt-0 card-text text-justify" style="white-space:pre-line">
                @Html.Raw(Model.JobDescription)
            </div>
        }
    }
    
    <p class="card-text"><small class="text-medium-emphasis">Last updated @Model.LastUpdate</small></p>
</div>
<!-- Card Body -->
<!-- Footer -->
<div class="card-footer">
    <a class="card-text me-2 cursorp" onclick="GoToJobDetail(@Model.JobID)">
        <svg class="icon">
            <use xlink:href="/Home/images/svg/free.svg#cil-comment-bubble"></use>
        </svg> @Model.CommentCount Comment
    </a>

    <a class="card-text mx-2" href="#" onclick="ShareJobPost();">
        <svg class="icon">
            <use xlink:href="/Home/images/svg/free.svg#cil-share"></use>
        </svg> Share
    </a>

    @if (httpContextAccessor.HttpContext.Request.Path.Value.ToString().Contains("Job-Detail"))
    {
        <!-- New comment click -->
        <a onclick="CreateReplyBox(this, 0)" class="card-text mx-2 cursorp">
            <svg class="icon">
                <use xlink:href="/Home/images/svg/free.svg#cil-comment-bubble"></use>
            </svg> Reply
        </a>
    }

    @if (Model.IsUserFlagged == true){
        <a class="card-text mx-2 text-danger" href="#" onclick="RemoveFlag(@Model.JobID);">
            <svg class="icon">
                <use xlink:href="/Home/images/svg/free.svg#cil-flag-alt"></use>
            </svg> Remove Flag
        </a>
    }
    else{
        <a class="card-text mx-2" href="#" onclick="OpenFlagModal(@Model.JobID);">
            <svg class="icon">
                <use xlink:href="/Home/images/svg/free.svg#cil-flag-alt"></use>
            </svg> Flag
        </a>
    }

    @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.Expired || Model.Status == Helpers.Constants.Enums.JobStatusTypes.Failed|| Model.Status == Helpers.Constants.Enums.JobStatusTypes.AdminApprovalPending || Model.Status == Helpers.Constants.Enums.JobStatusTypes.Rejected)
    {
        if(Model.JobPosterUserID == httpContextAccessor.HttpContext.Session.GetInt32("UserID")){
            <!-- Job Edit Button (Visible for jobposter for expired, failed and rejected jobs) -->
            <a href="../My-Job-Edit/@Model.JobID" class="card-text mx-2 cursorp">
                <svg class="icon">
                    <use xlink:href="/Home/images/svg/free.svg#cil-pencil"></use>
                </svg> Edit
            </a>
        }
    }

    @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.Failed)
    {
        if(Model.JobPosterUserID == httpContextAccessor.HttpContext.Session.GetInt32("UserID")){
            <!-- Job Restart Button (Visible for jobposter for expired, failed jobs) -->
            <a class="card-text mx-2 text-danger" href="#" onclick="RestartJob(@Model.JobID);">
                <svg class="icon">
                    <use xlink:href="/Home/images/svg/free.svg#cil-loop-circular"></use>
                </svg> Restart Flow
            </a>
        }
    }

    @if(Model.FlagCount > 0){
        <small class="float-right"><i>@Model.FlagCount user flagged this job</i></small>
    }

    <!-- Display "Start Informal Voting" button for job doer if auction is completed -->
    @if ((Model.Status == Helpers.Constants.Enums.JobStatusTypes.AuctionCompleted || Model.Status == Helpers.Constants.Enums.JobStatusTypes.Failed) && Model.JobDoerUserID == httpContextAccessor.HttpContext.Session.GetInt32("UserID"))
    {
        <button onclick="StartInformalVoting(@Model.JobID);" class="btn btn-sm btn-primary btn-shine float-right">
            Start Informal Voting
        </button>
    }

    <!-- Display "Submit KYC" button for job poster if auction is completed -->
    @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.KYCPending && Model.JobPosterUserID == httpContextAccessor.HttpContext.Session.GetInt32("UserID"))
    {
        <button onclick="window.location.href='../KYC-Verification'" class="btn btn-sm btn-primary btn-shine float-right">
            Submit KYC
        </button>
    }

    <!-- Display "Pay DoS Fee" button for job poster if auction is completed -->
    @if (Model.Status == Helpers.Constants.Enums.JobStatusTypes.DoSFeePending && Model.JobPosterUserID == httpContextAccessor.HttpContext.Session.GetInt32("UserID"))
    {
        <button onclick="PayDosFeeModal(@Model.JobID);" class="btn btn-sm btn-primary btn-shine float-right">
            Pay DoS Fee
        </button>

        @* <form class="btn-shine float-right d-inline" action="../Home/DosFeeProcess" method="POST">
            <input type="hidden" value="@Model.JobID" name="jobid">
            <script src="https://checkout.stripe.com/checkout.js" class="stripe-button"
            data-key="pk_test_51K4gybBY9GMD1AgYf1OySdf1e0Q7oMtKMHsRvQihRcUA25vXAXjmMdI5bb4FSfJSVklNVjfVNhUmMziW3Uh0exRZ00CWMZfdry"
            data-amount="@ViewBag.PaymentAmount"
            data-name="Dos Fee Payment @Program._settings.DosFees[1] $"
            data-description="Please pay the DoS fee to validate your bid."
            data-locale="en"
            data-zip-code="false"
            data-label="Pay DoS Fee">
            </script>
        </form> *@
    }


    <!-- Display "Submit Bid" button if auction continues -->
    @if (Model.JobPosterUserID != httpContextAccessor.HttpContext.Session.GetInt32("UserID"))
    {
        if(
            (httpContextAccessor.HttpContext.Session.GetString("UserType") == Helpers.Constants.Enums.UserIdentityType.VotingAssociate.ToString() && Model.Status == Helpers.Constants.Enums.JobStatusTypes.InternalAuction) 
            ||
            (httpContextAccessor.HttpContext.Session.GetString("UserType") == Helpers.Constants.Enums.UserIdentityType.Associate.ToString() && Model.Status == Helpers.Constants.Enums.JobStatusTypes.PublicAuction) 
        )
        {
            <!-- New bid click -->
            <button onclick="window.location.href='../Auctions?auctionid=@Model.Auction.AuctionID&jobid=@Model.JobID'" class="btn btn-sm btn-primary btn-shine float-right">
                Submit Bid
            </button>
        }
    }

</div> <!-- Footer -->



   